apply plugin: 'jacoco'

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                minimum = 0.95
            }
            excludes = [
            ]
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

dependencies {
    api(project(":${projectName}-api"))
    api(project(":${projectName}-jpa"))
    implementation "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:$hibernateJpaVersion"
    implementation "javax.inject:javax.inject:1"
    implementation "org.springframework.data:spring-data-jpa:$springDataVersion"
    implementation "org.aspectj:aspectjweaver:1.9.5"
    implementation "org.slf4j:slf4j-api:1.7.30"
    compileOnly "javax.annotation:javax.annotation-api:1.3.2"

    annotationProcessor("com.querydsl:querydsl-apt:${queryDslVersion}:jpa")
    annotationProcessor("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")

    testImplementation 'org.freemarker:freemarker:2.3.23'
    testCompileOnly "com.querydsl:querydsl-jpa:${queryDslVersion}"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testImplementation "com.github.javafaker:javafaker:$javaFakerVersion"

    testImplementation("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation "org.hibernate:hibernate-core:$hibernateVersion"
    testRuntimeOnly "com.h2database:h2:$h2Version"
}